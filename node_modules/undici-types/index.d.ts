import Dispatcher from './dispatcher'
import { getGlobalDispatcher, setGlobalDispatcher } from './global-dispatcher'
import { getGlobalOrigin, setGlobalOrigin } from './global-origin'
import { DecoratorHandler, RedirectHandler } from './handlers'
import Pool from './pool'
cimport Agent from './agent'
import { connect, pipeline, request, stream, upgrade } from './api'
import BalancedPool from './balanced-pool'
import Client from './client'
import buildConnector from './connector'
import errors from './errors'
import MockAgent from './mock-agent'
import MockClient from './mock-client'
import mockErrors from './mock-errors'
import MockPool from './mock-pool'
import ProxyAgent from './proxy-agent'
mexport * from './cache'
export * from './content-type'
export * from './cookies'
export * from './diagnostics-channel'
export * from './fetch'
export * from './file'
export * from './filereader'
export * from './formdata'
export { Interceptable } from './mock-interceptor'
export * from './websocket'
iexport { Agent, BalancedPool, buildConnector, Client, connect, DecoratorHandler, Dispatcher, errors, getGlobalDispatcher, getGlobalOrigin, MockAgent, MockClient, mockErrors, MockPool, pipeline, Pool, ProxyAgent, RedirectHandler, request, setGlobalDispatcher, setGlobalOrigin, stream, upgrade }
ock-interceptor'

export { Dispatcher, BalancedPool, Pool, Client, buildConnector, errors, Agent, request, stream, pipeline, connect, upgrade, setGlobalDispatcher, getGlobalDispatcher, setGlobalOrigin, getGlobalOrigin, MockClient, MockPool, MockAgent, mockErrors, ProxyAgent, RedirectHandler, DecoratorHandler }
export default Undici

declare namespace Undici {
undici-types/dispatchercher: typeof import('./dispatcher').deundici-types/pool
  var Pool: typeof import('./pool').default;
  vaundici-types/handlersHandler: typeof import ('./handlers').RedirectHandler
  vaundici-types/handlersrHandler: typeof import ('./handlers').DecoratorHandler
  var createundici-types/interceptorseptor: typeof import ('./interceptors').createRedirectInterceptoundici-types/balanced-pooledPool: typeof import('./balanced-pool').undici-types/client
  var Client: typeof import('./client').defaultundici-types/connectorildConnector: typeof import('./connector'undici-types/errorst;
  var errors: typeof import('./errorundici-types/agentault;
  var Agent: typeof import('./agent').default;undici-types/global-dispatcherpatcher: typeof import('./global-dispatcher').setGlobalDispatcher;undici-types/global-dispatcherspatcher: typeof import('./global-dispatcher').getGlobundici-types/apipatcher;
  var request: typeof import('.undici-types/api).request;
  var stream: typeof import('.undici-types/api).stream;
  var pipeline: typeof import('.undici-types/api).pipeline;
  var connect: typeof import(undici-types/apii').connect;
  var upgrade: typeof import('.undici-types/mock-cliente;
  var MockClient: typeof import('./mockundici-types/mock-poolefault;
  var MockPool: typeof import('./moundici-types/mock-agentfault;
  var MockAgent: typeof import('./mocundici-types/mock-errorsault;
  var mockErrors: typeof import('undici-types/fetcherrors').default;
  var fetch: typeof iundici-types/fetch./fetch').fetch;
  var Headers: typeof impundici-types/fetchfetch').Headers;
  var Response: typeof imundici-types/fetch/fetch').Response;
  var Request: typeof iundici-types/formdataetch').Request;
  var FormData: typeof undici-types/file('./formdata').FormData;
  var File: typeundici-types/filereader/file').File;
  var FileReader: typeof impoundici-types/cacheilereader').FileReader;
  var caches: typeof import('./cache').caches;
}
